{
  "info": {
    "_postman_id": "670a6541-0509-4d79-8b62-550460c4a700",
    "name": "validator-services-tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "29844336",
    "_collection_link": "https://iatisecretariat.postman.co/workspace/IATI~c354ba4e-15bf-41ee-9d69-a5a5360da160/collection/13097277-670a6541-0509-4d79-8b62-550460c4a700?action=share&source=collection_link&creator=29844336"
  },
  "item": [
    {
      "name": "Initialisation",
      "item": [
        {
          "name": "Collection Initialisation (pvt-get-publishers )",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// The collection and folder level pre-request scripts in Postman are run per test, so this initialisation is put here",
                  "// as something which will run at the start of each collection run.",
                  "",
                  "",
                  "pm.test('Publisher list response received', () => {",
                  "    pm.expect(pm.response).to.have.property('code', 200);",
                  "    pm.expect(pm.response).to.have.property('status', 'OK');",
                  "",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    findPublisherWithErroringDocument(jsonData, 0);",
                  "});",
                  "",
                  "",
                  "function findPublisherWithErroringDocument(publisherListJson, index) {",
                  "",
                  "    let publisher = publisherListJson[index];",
                  "",
                  "    const getRequest = {",
                  "        url: `${pm.variables.get(\"baseURL\")}/pvt/publishers/${publisher.org_id}/documents`,",
                  "        method: 'GET',",
                  "        header: [`${pm.variables.get(\"keyName\")}: ${pm.variables.get(\"keyValue\")}`]",
                  "    };",
                  "",
                  "    console.log(`Calling sendRequest to get list of documents for ${publisher.org_id}`);",
                  "    pm.sendRequest(getRequest, (error, response) => {",
                  "        if (error) {",
                  "            console.log(`HTTP response error fetching documents for publisher ${publisher.org_id}: ${error}`);",
                  "            throw new Error(`When trying to find a publisher with invalid documents, HTTP response error fetching documents for publisher ${publisher.org_id}: ${error}`);",
                  "        }",
                  "",
                  "        var documentJsonData = response.json();",
                  "        documentsWithErrors = documentJsonData.filter(doc => doc.report !== null && doc.report.summary !== null && (doc.report.summary.error !== 0 || doc.report.summary.warning !== 0));",
                  "        console.log(`Documents with errors or warnings: ${documentsWithErrors.length}`);",
                  "        if (documentsWithErrors.length > 0) {",
                  "            pm.collectionVariables.set(\"publisher_id\", documentsWithErrors[0].publisher);",
                  "            console.log(`Setting collection variable publisher_id to: ${documentsWithErrors[0].publisher}`);",
                  "            console.log(\"------------ pre-test setup complete ------------\");",
                  "        } else {",
                  "            if (index == 100) {",
                  "                console.log(\"Searched a maximum number of 100 publishers for a dataset with errors or warnings\");",
                  "                throw new Error(`Searched a maximum number of 100 publishers for a dataset with errors or warnings`);",
                  "            }",
                  "            findPublisherWithErroringDocument(publisherListJson, index + 1);",
                  "        }",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/publishers",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "publishers"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Publishers and Documents",
      "item": [
        {
          "name": "Error Handling",
          "item": [
            {
              "name": "pvt-get-single-publisher GET /pvt/publishers/{id}?lookupKey=id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () { pm.response.to.have.status(404); });",
                      "const jsonData = pm.response.json();",
                      "pm.test(\"Expect body to have 'client_error' key\", function () {",
                      "     pm.expect(jsonData).to.have.key(\"client_error\")",
                      "});",
                      "pm.test(\"Expect error to contain certain message\", function () {",
                      "    pm.expect(jsonData.client_error).to.equal(\"Cannot find publisher with id: not-a-publisher-id\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pvt/publishers/not-a-publisher-id?lookupKey=id",
                  "host": ["{{baseURL}}"],
                  "path": ["pvt", "publishers", "not-a-publisher-id"],
                  "query": [
                    {
                      "key": "lookupKey",
                      "value": "id"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "pvt-get-single-publisher GET /pvt/publishers/{id}?lookupKey=name 404",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () { pm.response.to.have.status(404); });",
                      "const jsonData = pm.response.json();",
                      "pm.test(\"Expect body to have 'client_error' key\", function () {",
                      "     pm.expect(jsonData).to.have.key(\"client_error\")",
                      "});",
                      "pm.test(\"Expect error to contain certain message\", function () {",
                      "    pm.expect(jsonData.client_error).to.equal(\"Cannot find publisher with name: not-a-publisher-id\");",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pvt/publishers/not-a-publisher-id?lookupKey=name",
                  "host": ["{{baseURL}}"],
                  "path": ["pvt", "publishers", "not-a-publisher-id"],
                  "query": [
                    {
                      "key": "lookupKey",
                      "value": "name"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Publishers and Publishers Docs",
          "item": [
            {
              "name": "pvt-get-publishers GET /pvt/publishers",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                      "pm.test(\"Expect body to be an Array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array')",
                      "});",
                      "pm.test(\"Expect objects in the Array to have certain keys\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData[0]).to.have.keys(['org_id', 'name', 'title', 'state', 'country_code', 'package_count', 'iati_id', 'black_flag', 'black_flag_notified']);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pvt/publishers",
                  "host": ["{{baseURL}}"],
                  "path": ["pvt", "publishers"]
                }
              },
              "response": []
            },
            {
              "name": "pvt-get-publishers-documents GET /pvt/publishers/{id}/documents",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                      "const jsonData = pm.response.json();",
                      "pm.test(\"Expect body to be an Array\", function () {",
                      "    pm.expect(jsonData).to.be.an('array')",
                      "});",
                      "pm.test(\"Expect objects in the Array to have certain keys\", function () {",
                      "    pm.expect(jsonData[0]).to.have.keys(['id', 'hash', 'url', 'name', 'first_seen', 'downloaded', 'download_error', 'validation', 'regenerate_validation_report', 'publisher', 'validation_created','valid', 'report', 'modified',  'solrize_end', 'clean_start', 'clean_end', 'clean_error', 'file_schema_valid','last_solrize_end']);",
                      "});",
                      "pm.test(\"Set document id, hash, url for tests\", function () {",
                      "    pm.collectionVariables.set(\"document_id\", jsonData.filter(doc => doc.validation !== null)[0].id);",
                      "    pm.collectionVariables.set(\"document_hash\", jsonData.filter(doc => doc.validation !== null)[0].hash);",
                      "    pm.collectionVariables.set(\"document_name\", jsonData.filter(doc => doc.validation !== null)[0].name);",
                      "    pm.collectionVariables.set(\"document_url\", jsonData.filter(doc => doc.validation !== null)[0].url);",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pvt/publishers/{{publisher_id}}/documents",
                  "host": ["{{baseURL}}"],
                  "path": ["pvt", "publishers", "{{publisher_id}}", "documents"]
                }
              },
              "response": []
            },
            {
              "name": "pvt-get-publishers-documents GET /pvt/publishers/{id}/reports",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                      "const jsonData = pm.response.json();",
                      "pm.test(\"Expect body to be an Array\", function () {",
                      "    pm.expect(jsonData).to.be.an('array')",
                      "});",
                      "pm.test(\"Expect objects in the Array to have certain keys\", function () {",
                      "    pm.expect(jsonData[0]).to.have.keys(['id', 'hash', 'url', 'name', 'first_seen', 'downloaded', 'download_error', 'validation', 'regenerate_validation_report', 'publisher', 'validation_created','valid', 'report', 'modified',  'solrize_end', 'clean_start', 'clean_end', 'clean_error', 'file_schema_valid','last_solrize_end']);",
                      "});",
                      "pm.test(\"Set document id, hash, url for tests\", function () {",
                      "    pm.collectionVariables.set(\"document_id\", jsonData.filter(doc => doc.validation !== null)[0].id);",
                      "    pm.collectionVariables.set(\"document_hash\", jsonData.filter(doc => doc.validation !== null)[0].hash);",
                      "    pm.collectionVariables.set(\"document_name\", jsonData.filter(doc => doc.validation !== null)[0].name);",
                      "    pm.collectionVariables.set(\"document_url\", jsonData.filter(doc => doc.validation !== null)[0].url);",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pvt/publishers/{{publisher_id}}/documents",
                  "host": ["{{baseURL}}"],
                  "path": ["pvt", "publishers", "{{publisher_id}}", "documents"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "GET Report",
          "item": [
            {
              "name": "pub-get-report GET /pub/validation/existing?id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pub/validation/existing?id={{document_id}}",
                  "host": ["{{baseURL}}"],
                  "path": ["pub", "validation", "existing"],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{document_id}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "pub-get-report GET /pub/validation/existing?hash",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pub/validation/existing?hash={{document_hash}}",
                  "host": ["{{baseURL}}"],
                  "path": ["pub", "validation", "existing"],
                  "query": [
                    {
                      "key": "hash",
                      "value": "{{document_hash}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "pub-get-report GET /pub/validation/existing?url",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pub/validation/existing?url={{document_url}}",
                  "host": ["{{baseURL}}"],
                  "path": ["pub", "validation", "existing"],
                  "query": [
                    {
                      "key": "url",
                      "value": "{{document_url}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "pub-get-report GET /pub/validation/existing?name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pub/validation/existing?name={{document_name}}",
                  "host": ["{{baseURL}}"],
                  "path": ["pub", "validation", "existing"],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{document_name}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Expect body to be an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object')",
                  "});",
                  "pm.test(\"Expect object to have certain keys\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.all.keys(['registry_hash', 'registry_id', 'registry_name', 'document_url', 'valid', 'report']);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Report - showerrors=false",
          "item": [
            {
              "name": "pub-get-report GET /pub/validation/existing?id=<document_id>&showerrors=false",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pub/validation/existing?id={{document_id}}&showerrors=false",
                  "host": ["{{baseURL}}"],
                  "path": ["pub", "validation", "existing"],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{document_id}}"
                    },
                    {
                      "key": "showerrors",
                      "value": "false"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "pub-get-report GET /pub/validation/existing?hash=<document_hash>&showerrors=false",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pub/validation/existing?hash={{document_hash}}&showerrors=false",
                  "host": ["{{baseURL}}"],
                  "path": ["pub", "validation", "existing"],
                  "query": [
                    {
                      "key": "hash",
                      "value": "{{document_hash}}"
                    },
                    {
                      "key": "showerrors",
                      "value": "false"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "pub-get-report GET /pub/validation/existing?url=<document_url>&showerrors=false",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pub/validation/existing?url={{document_url}}&showerrors=false",
                  "host": ["{{baseURL}}"],
                  "path": ["pub", "validation", "existing"],
                  "query": [
                    {
                      "key": "url",
                      "value": "{{document_url}}"
                    },
                    {
                      "key": "showerrors",
                      "value": "false"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "pub-get-report GET /pub/validation/existing?name=<document_name>&showerrors=false",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseURL}}/pub/validation/existing?name={{document_name}}&showerrors=false",
                  "host": ["{{baseURL}}"],
                  "path": ["pub", "validation", "existing"],
                  "query": [
                    {
                      "key": "name",
                      "value": "{{document_name}}"
                    },
                    {
                      "key": "showerrors",
                      "value": "false"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Expect body to be an object\", function () {",
                  "    pm.expect(jsonData).to.be.an('object')",
                  "});",
                  "pm.test(\"Expect object to have certain keys\", function () {",
                  "    pm.expect(jsonData).to.have.keys(['registry_hash', 'registry_id', 'registry_name', 'document_url', 'valid', 'report']);",
                  "});",
                  "pm.test(\"Expect report object to only have certain keys\", function () {",
                  "    pm.expect(jsonData.report).to.have.all.keys(['valid', 'summary', 'fileType', 'iatiVersion']);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "pvt-get-single-publisher GET /pvt/publishers/{id}?lookupKey=id",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Expect body to be an Array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array')",
                  "});",
                  "pm.test(\"Expect objects in the Array to have certain keys\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[0]).to.have.keys(['org_id', 'name', 'description', 'title', 'state', 'image_url', 'country_code', 'package_count', 'iati_id']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/publishers/{{publisher_id}}?lookupKey=id",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "publishers", "{{publisher_id}}"],
              "query": [
                {
                  "key": "lookupKey",
                  "value": "id"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-get-single-publisher GET /pvt/publishers/{name}?lookupKey=name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Expect body to be an Array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array')",
                  "});",
                  "pm.test(\"Expect objects in the Array to have certain keys\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[0]).to.have.keys(['org_id', 'name', 'description', 'title', 'state', 'image_url', 'country_code', 'package_count', 'iati_id']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/publishers/afdb?lookupKey=name",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "publishers", "afdb"],
              "query": [
                {
                  "key": "lookupKey",
                  "value": "name"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-get-single-document GET /pvt/documents/{id}",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Expect body to be an Array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array')",
                  "});",
                  "pm.test(\"Expect objects in the Array to have certain keys\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[0]).to.have.keys(['id', 'hash', 'url', 'name', 'first_seen', 'downloaded', 'download_error', 'validation','regenerate_validation_report', 'publisher', 'validation_created','valid', 'summary',  'modified', 'clean_start', 'clean_end', 'clean_error', 'file_schema_valid', 'solrize_end', 'last_solrize_end']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/documents/{{document_id}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "documents", "{{document_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "pvt-get-single-document GET /pvt/documents/{id}?lookupKey=id",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Expect body to be an Array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array')",
                  "});",
                  "pm.test(\"Expect objects in the Array to have certain keys\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[0]).to.have.keys(['id', 'hash', 'url', 'name', 'first_seen', 'downloaded', 'download_error', 'validation','regenerate_validation_report', 'publisher', 'validation_created','valid', 'summary',  'modified', 'clean_start', 'clean_end', 'clean_error', 'file_schema_valid', 'solrize_end', 'last_solrize_end']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/documents/{{document_id}}?lookupKey=id",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "documents", "{{document_id}}"],
              "query": [
                {
                  "key": "lookupKey",
                  "value": "id"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-get-single-document GET /pvt/documents/{name}?lookupKey=name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Expect body to be an Array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array')",
                  "});",
                  "pm.test(\"Expect objects in the Array to have certain keys\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[0]).to.have.keys(['id', 'hash', 'url', 'name', 'first_seen', 'downloaded', 'download_error', 'validation','regenerate_validation_report', 'publisher', 'validation_created','valid', 'summary',  'modified', 'clean_start', 'clean_end', 'clean_error', 'file_schema_valid', 'solrize_end', 'last_solrize_end']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/documents/{{document_name}}?lookupKey=name",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "documents", "{{document_name}}"],
              "query": [
                {
                  "key": "lookupKey",
                  "value": "name"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Guidance Links",
      "item": [
        {
          "name": "pvt-get-guidance-links - bad version",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "pm.test(\"Body contains error: true\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.eql(true);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/guidance-links/1.02",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "guidance-links", "1.02"]
            }
          },
          "response": []
        },
        {
          "name": "pvt-get-guidance-links - good",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Body contains version: 2.03\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.eql(\"2.03\");",
                  "});",
                  "pm.test(\"commitSha is present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.commitSha).to.be.a('string').with.length.greaterThan(0);",
                  "});",
                  "pm.test(\"content object is present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.content).to.be.a('object');",
                  "});",
                  "pm.test(\"content object has a key 1.1.3\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(Object.keys(jsonData.content)).to.include('1.1.3');",
                  "});",
                  "pm.test(\"content object has sub-keys path and url\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(Object.keys(jsonData.content).reduce((acc, id) => [...acc].concat(Object.keys(jsonData.content[id])), [])).to.include.members(['path', 'url']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/guidance-links/2.03",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "guidance-links", "2.03"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Validation Regenerate",
      "item": [
        {
          "name": "pvt-validation-regenerate PATCH /pvt/validation/regenerate",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () { pm.response.to.have.status(204); });",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"ids\": [\"{{document_id}}\"]}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/pvt/validation/regenerate",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "validation", "regenerate"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Ad Hoc Validate",
      "item": [
        {
          "name": "pvt-post-adhoc-file POST /pvt/adhoc/upload",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const uuid = require('uuid');",
                  "pm.environment.set(\"file_guid\", uuid.v4());",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "iati-act-no-errors-vs-test.xml"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/upload?filename=iati-act-no-errors-vs-test.xml&sessionId={{sessionId}}&guid={{file_guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "upload"],
              "query": [
                {
                  "key": "filename",
                  "value": "iati-act-no-errors-vs-test.xml"
                },
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                },
                {
                  "key": "guid",
                  "value": "{{file_guid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-post-adhoc-url POST /pvt/adhoc/url",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const uuid = require('uuid');",
                  "pm.environment.set(\"url_guid\", uuid.v4());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/url?url=https://raw.githubusercontent.com/IATI/js-validator-api/develop/integration-tests/test-files/iati-act-no-errors.xml&sessionId={{sessionId}}&guid={{url_guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "url"],
              "query": [
                {
                  "key": "url",
                  "value": "https://raw.githubusercontent.com/IATI/js-validator-api/develop/integration-tests/test-files/iati-act-no-errors.xml"
                },
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                },
                {
                  "key": "guid",
                  "value": "{{url_guid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-get-adhoc-session URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "let jsonData = pm.response.json();",
                  "",
                  "if (jsonData.length >= 2 && jsonData.every((doc) => doc.validated !== null)) {",
                  "    pm.test(\"Body contains same sessionId as request\", function () {",
                  "        pm.expect(jsonData[0].session_id).to.eql(pm.environment.get(\"sessionId\"));",
                  "    }); ",
                  "    postman.setNextRequest('pub-get-report GET /pub/validation/existing?testfile=<url_guid>')",
                  "} else {",
                  "    postman.setNextRequest('Wait')",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/session?sessionId={{sessionId}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "session"],
              "query": [
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Wait",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": ["postman.setNextRequest('pvt-get-adhoc-session URL')"],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://postman-echo.com/delay/3",
              "protocol": "https",
              "host": ["postman-echo", "com"],
              "path": ["delay", "3"]
            }
          },
          "response": []
        },
        {
          "name": "pub-get-report GET /pub/validation/existing?testfile=<url_guid>",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Expect body to be an object\", function () {",
                  "    pm.expect(jsonData).to.be.an('object')",
                  "});",
                  "pm.test(\"Expect object to have certain keys\", function () {",
                  "    pm.expect(jsonData).to.have.keys(['session_id', 'guid', 'filename', 'valid', 'report']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pub/validation/existing?testfile={{url_guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pub", "validation", "existing"],
              "query": [
                {
                  "key": "testfile",
                  "value": "{{url_guid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pub-get-report GET /pub/validation/existing?testfile=<file_guid>",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "const jsonData = pm.response.json();",
                  "pm.test(\"Expect body to be an object\", function () {",
                  "    pm.expect(jsonData).to.be.an('object')",
                  "});",
                  "pm.test(\"Expect object to have certain keys\", function () {",
                  "    pm.expect(jsonData).to.have.keys(['session_id', 'guid', 'filename', 'valid', 'report']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pub/validation/existing?testfile={{file_guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pub", "validation", "existing"],
              "query": [
                {
                  "key": "testfile",
                  "value": "{{file_guid}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const uuid = require('uuid');",
              "if (!pm.environment.get(\"sessionId\")) {",
              "    pm.environment.set('sessionId', uuid.v4());",
              "}",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "Ad Hoc Validate - Error Handling",
      "item": [
        {
          "name": "pvt-post-adhoc-url POST /pvt/adhoc/url - URL has 400 Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "pm.test(\"Your test name\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Error fetching from provided URL: HTTP Error Response: 400 BAD REQUEST\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/url?url=https://httpbin.org/status/400&sessionId={{sessionId}}&guid={{$guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "url"],
              "query": [
                {
                  "key": "url",
                  "value": "https://httpbin.org/status/400"
                },
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                },
                {
                  "key": "guid",
                  "value": "{{$guid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-post-adhoc-url POST /pvt/adhoc/url - URL has 500 Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "pm.test(\"Error message contains HTTP response from URL\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Error fetching from provided URL: HTTP Error Response: 500 INTERNAL SERVER ERROR\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/url?url=https://httpbin.org/status/500&sessionId={{sessionId}}&guid={{$guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "url"],
              "query": [
                {
                  "key": "url",
                  "value": "https://httpbin.org/status/500"
                },
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                },
                {
                  "key": "guid",
                  "value": "{{$guid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-post-adhoc-url POST /pvt/adhoc/url - URL fetch Exception",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "pm.test(\"Error message contains error code\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.code).to.eql(\"CERT_HAS_EXPIRED\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/url?url=https://expired.badssl.com/&sessionId={{sessionId}}&guid={{$guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "url"],
              "query": [
                {
                  "key": "url",
                  "value": "https://expired.badssl.com/"
                },
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                },
                {
                  "key": "guid",
                  "value": "{{$guid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-post-adhoc-file POST /pvt/adhoc/upload text in form",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Body is correct\", function () {",
                  "    pm.response.to.have.body(\"Expect form data Content-Type to be text/xml or application/xml\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "value": "<iati></iati>",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/upload?filename=iati-act-no-errors-vs-test.xml&sessionId={{sessionId}}&guid={{$guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "upload"],
              "query": [
                {
                  "key": "filename",
                  "value": "iati-act-no-errors-vs-test.xml"
                },
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                },
                {
                  "key": "guid",
                  "value": "{{$guid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-post-adhoc-file POST /pvt/adhoc/upload file in body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Body is correct\", function () {",
                  "    pm.response.to.have.body(\"Expect Request Content-Type to be multipart/form-data\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "file",
              "file": {
                "src": "iati-act-no-errors-vs-test.xml"
              }
            },
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/upload?filename=iati-act-no-errors-vs-test.xml&sessionId={{sessionId}}&guid={{$guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "upload"],
              "query": [
                {
                  "key": "filename",
                  "value": "iati-act-no-errors-vs-test.xml"
                },
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                },
                {
                  "key": "guid",
                  "value": "{{$guid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-post-adhoc-file POST /pvt/adhoc/upload text in body",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Body is correct\", function () {",
                  "    pm.response.to.have.body(\"Expect Request Content-Type to be multipart/form-data\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "<iati></iati>"
            },
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/upload?filename=iati-act-no-errors-vs-test.xml&sessionId={{sessionId}}&guid={{$guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "upload"],
              "query": [
                {
                  "key": "filename",
                  "value": "iati-act-no-errors-vs-test.xml"
                },
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                },
                {
                  "key": "guid",
                  "value": "{{$guid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-post-adhoc-file POST /pvt/adhoc/upload empty file",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "pm.test(\"Body is correct\", function () {",
                  "    pm.response.to.have.body(\"File in request body is empty.\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "empty.xml"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/upload?filename=iati-act-no-errors-vs-test.xml&sessionId={{sessionId}}&guid={{$guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "upload"],
              "query": [
                {
                  "key": "filename",
                  "value": "iati-act-no-errors-vs-test.xml"
                },
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                },
                {
                  "key": "guid",
                  "value": "{{$guid}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "const uuid = require('uuid');",
              "if (!environment.sessionId) {",
              "    postman.setEnvironmentVariable('sessionId', uuid.v4());",
              "}"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "Flagged Pulishers",
      "item": [
        {
          "name": "GET Black Flagged Publishers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"API responds with an Array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(typeof jsonData).to.eql('object');",
                  "    pm.expect(typeof jsonData.length).to.eql('number');",
                  "    console.log(typeof jsonData.length)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/publishers/flagged",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "publishers", "flagged"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Statistics",
      "item": [
        {
          "name": "pub-get-stats-summary-aggregate GET /pub/stats/summary_aggregate",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Expect body to be an Object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object')",
                  "});",
                  "pm.test(\"Expect objects in the Array to have certain keys\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    Object.values(jsonData).forEach((item) => {",
                  "        var keys = Object.keys(item).filter(k => ['critical', 'error', 'warning'].includes(k));",
                  "        pm.expect(keys).to.deep.equal(['critical', 'error', 'warning']);",
                  "    });",
                  "});",
                  "",
                  "pm.test(\"Set publisher name for subsequent stats tests\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.collectionVariables.set(\"publisher_name\", Object.keys(jsonData)[0]);",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pub/stats/summary_aggregate",
              "host": ["{{baseURL}}"],
              "path": ["pub", "stats", "summary_aggregate"]
            }
          },
          "response": []
        },
        {
          "name": "pub-get-stats-summary-precalc GET /pub/stats/summary_precalc",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "})",
                  "",
                  "pm.test('Expect body to be an Object', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "})",
                  "",
                  "pm.test(\"Expect objects in the Array to have certain keys\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    Object.values(jsonData).forEach((item) => {",
                  "        var keys = Object.keys(item).filter(k => ['critical', 'error', 'warning'].includes(k));",
                  "        pm.expect(keys).to.deep.equal(['critical', 'error', 'warning']);",
                  "    });",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pub/stats/summary_precalc",
              "host": ["{{baseURL}}"],
              "path": ["pub", "stats", "summary_precalc"]
            }
          },
          "response": []
        },
        {
          "name": "pub-get-stats-all GET /pub/stats/all",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Expect body to be an Object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object')",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pub/stats/all?date=2021-09-12",
              "host": ["{{baseURL}}"],
              "path": ["pub", "stats", "all"],
              "query": [
                {
                  "key": "date",
                  "value": "2021-09-12"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pub-get-stats-publisher GET /pub/stats/{publisher_name}",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });",
                  "pm.test(\"Expect body to be an Object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object')",
                  "});",
                  "pm.test(\"Expect object to have certain keys\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.keys(pm.collectionVariables.get(\"publisher_name\"));",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pub/stats/publisher/{{publisher_name}}",
              "host": ["{{baseURL}}"],
              "path": ["pub", "stats", "publisher", "{{publisher_name}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Maintenance Mode",
      "item": [
        {
          "name": "pvt-post-adhoc-file POST /pvt/adhoc/upload - Disabled",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 503\", function () {",
                  "    pm.response.to.have.status(503);",
                  "});",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (pm.environment.get(\"testingMaintenanceMode\") !== \"true\") {",
                  "    pm.execution.skipRequest();",
                  "}",
                  "",
                  "const uuid = require('uuid');",
                  "pm.environment.set(\"file_guid\", uuid.v4());",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "iati-act-no-errors-vs-test.xml"
                }
              ]
            },
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/upload?filename=iati-act-no-errors-vs-test.xml&sessionId={{sessionId}}&guid={{file_guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "upload"],
              "query": [
                {
                  "key": "filename",
                  "value": "iati-act-no-errors-vs-test.xml"
                },
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                },
                {
                  "key": "guid",
                  "value": "{{file_guid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-post-adhoc-url POST /pvt/adhoc/url - Disabled",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 503\", function () {",
                  "    pm.response.to.have.status(503);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (pm.environment.get(\"testingMaintenanceMode\") !== \"true\") {",
                  "    pm.execution.skipRequest();",
                  "}",
                  "",
                  "const uuid = require('uuid');",
                  "pm.environment.set(\"url_guid\", uuid.v4());"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseURL}}/pvt/adhoc/url?url=https://raw.githubusercontent.com/IATI/js-validator-api/develop/integration-tests/test-files/iati-act-no-errors.xml&sessionId={{sessionId}}&guid={{url_guid}}",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "adhoc", "url"],
              "query": [
                {
                  "key": "url",
                  "value": "https://raw.githubusercontent.com/IATI/js-validator-api/develop/integration-tests/test-files/iati-act-no-errors.xml"
                },
                {
                  "key": "sessionId",
                  "value": "{{sessionId}}"
                },
                {
                  "key": "guid",
                  "value": "{{url_guid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "pvt-validation-regenerate PATCH /pvt/validation/regenerate - Disabled",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 503\", function () {",
                  "    pm.response.to.have.status(503);",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (pm.environment.get(\"testingMaintenanceMode\") !== \"true\") {",
                  "    pm.execution.skipRequest();",
                  "}",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"ids\": [\"{{document_id}}\"]}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseURL}}/pvt/validation/regenerate",
              "host": ["{{baseURL}}"],
              "path": ["pvt", "validation", "regenerate"]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "const uuid = require('uuid');",
              "if (!pm.environment.get(\"sessionId\")) {",
              "    pm.environment.set('sessionId', uuid.v4());",
              "}",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "packages": {},
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "pub-get-version GET /pub/version",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Body matches string\", function () {",
              "    pm.expect(pm.response.text()).to.be.a('string').with.length.greaterThan(4);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseURL}}/pub/version",
          "host": ["{{baseURL}}"],
          "path": ["pub", "version"]
        }
      },
      "response": []
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "value",
        "value": "{{keyValue}}",
        "type": "string"
      },
      {
        "key": "key",
        "value": "{{keyName}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "publisher_id",
      "value": "f402080b-72ee-4baf-a010-77f56a67ec71"
    },
    {
      "key": "document_id",
      "value": ""
    },
    {
      "key": "publisher_name",
      "value": ""
    },
    {
      "value": "",
      "disabled": true
    },
    {
      "key": "document_hash",
      "value": ""
    },
    {
      "key": "document_url",
      "value": ""
    },
    {
      "key": "document_name",
      "value": ""
    }
  ]
}
